import { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { 
  Radar, 
  Target, 
  Zap, 
  Filter, 
  Search, 
  Building2, 
  DollarSign, 
  TrendingUp, 
  Users, 
  Phone, 
  Mail, 
  MapPin,
  Clock,
  Star,
  AlertTriangle,
  CheckCircle,
  Eye,
  Settings,
  Download,
  RefreshCw,
  ZoomIn,
  ZoomOut
} from 'lucide-react';
import { useQuery } from '@tanstack/react-query';

interface LeadBlip {
  id: string;
  businessName: string;
  industry: string;
  location: { lat: number; lng: number };
  coordinates: { x: number; y: number };
  priority: 'critical' | 'high' | 'medium' | 'low';
  status: 'new' | 'contacted' | 'qualified' | 'proposal' | 'closed';
  estimatedValue: number;
  confidence: number;
  lastActivity: Date;
  contactInfo: {
    email?: string;
    phone?: string;
    website?: string;
  };
  kpis: {
    responseRate: number;
    conversionProb: number;
    dealSize: number;
    timeToClose: number;
    competitorThreat: number;
  };
  aiInsights: string[];
  autoGenerated: boolean;
  source: string;
}

interface QQFilter {
  industry: string[];
  priority: string[];
  status: string[];
  valueRange: [number, number];
  confidenceRange: [number, number];
  location: string;
  autoGeneratedOnly: boolean;
}

export default function QQLeadIntelligenceMap() {
  const [leads, setLeads] = useState<LeadBlip[]>([]);
  const [selectedLead, setSelectedLead] = useState<LeadBlip | null>(null);
  const [filters, setFilters] = useState<QQFilter>({
    industry: [],
    priority: [],
    status: [],
    valueRange: [0, 1000000],
    confidenceRange: [0, 100],
    location: '',
    autoGeneratedOnly: false
  });
  const [isGenerating, setIsGenerating] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const mapRef = useRef<HTMLDivElement>(null);
  
  // Real map state
  const [mapCenter, setMapCenter] = useState({ lat: 40.7128, lng: -74.0060 }); // NYC coordinates
  const [mapZoom, setMapZoom] = useState(10);
  const [mapScale, setMapScale] = useState(100);

  // Fetch leads data
  const { data: leadsData, refetch } = useQuery({
    queryKey: ['/api/leads/intelligent'],
    refetchInterval: 5000,
  });

  // Auto-generate leads
  const generateLeads = async () => {
    setIsGenerating(true);
    try {
      const response = await fetch('/api/leads/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          count: 5,
          industries: ['healthcare', 'finance', 'manufacturing', 'retail', 'technology'],
          targetValue: [10000, 500000]
        })
      });
      
      if (response.ok) {
        refetch();
      }
    } catch (error) {
      console.error('Lead generation failed:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  // Generate mock leads for demonstration
  useEffect(() => {
    const mockLeads: LeadBlip[] = [
      {
        id: 'lead_001',
        businessName: 'TechFlow Solutions',
        industry: 'Technology',
        location: { lat: 40.7128, lng: -74.0060 },
        coordinates: { x: 120, y: 80 },
        priority: 'critical',
        status: 'qualified',
        estimatedValue: 250000,
        confidence: 87,
        lastActivity: new Date(),
        contactInfo: {
          email: 'info@techflow.com',
          phone: '+1-555-0123',
          website: 'techflow.com'
        },
        kpis: {
          responseRate: 94,
          conversionProb: 78,
          dealSize: 250000,
          timeToClose: 45,
          competitorThreat: 23
        },
        aiInsights: [
          'High growth potential in Q1',
          'Decision maker actively researching',
          'Budget approved for automation'
        ],
        autoGenerated: true,
        source: 'AI Lead Generator'
      },
      {
        id: 'lead_002',
        businessName: 'MedCare Analytics',
        industry: 'Healthcare',
        location: { lat: 34.0522, lng: -118.2437 },
        coordinates: { x: 280, y: 150 },
        priority: 'high',
        status: 'new',
        estimatedValue: 180000,
        confidence: 72,
        lastActivity: new Date(Date.now() - 2 * 60 * 60 * 1000),
        contactInfo: {
          email: 'procurement@medcare.com',
          phone: '+1-555-0456'
        },
        kpis: {
          responseRate: 68,
          conversionProb: 65,
          dealSize: 180000,
          timeToClose: 60,
          competitorThreat: 35
        },
        aiInsights: [
          'HIPAA compliance requirements',
          'Expanding to 3 new locations',
          'Current system end-of-life in 6 months'
        ],
        autoGenerated: true,
        source: 'Perplexity Market Research'
      },
      {
        id: 'lead_003',
        businessName: 'RetailMax Corp',
        industry: 'Retail',
        location: { lat: 41.8781, lng: -87.6298 },
        coordinates: { x: 450, y: 200 },
        priority: 'medium',
        status: 'contacted',
        estimatedValue: 120000,
        confidence: 89,
        lastActivity: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),
        contactInfo: {
          email: 'tech@retailmax.com',
          phone: '+1-555-0789',
          website: 'retailmax.com'
        },
        kpis: {
          responseRate: 91,
          conversionProb: 82,
          dealSize: 120000,
          timeToClose: 30,
          competitorThreat: 18
        },
        aiInsights: [
          'Peak season automation needed',
          'Inventory management pain points',
          'Multiple location rollout planned'
        ],
        autoGenerated: false,
        source: 'Inbound Inquiry'
      }
    ];

    setLeads(mockLeads);
  }, []);

  // Filter leads based on QQ filters
  const filteredLeads = leads.filter(lead => {
    if (filters.industry.length && !filters.industry.includes(lead.industry)) return false;
    if (filters.priority.length && !filters.priority.includes(lead.priority)) return false;
    if (filters.status.length && !filters.status.includes(lead.status)) return false;
    if (lead.estimatedValue < filters.valueRange[0] || lead.estimatedValue > filters.valueRange[1]) return false;
    if (lead.confidence < filters.confidenceRange[0] || lead.confidence > filters.confidenceRange[1]) return false;
    if (filters.autoGeneratedOnly && !lead.autoGenerated) return false;
    if (searchQuery && !lead.businessName.toLowerCase().includes(searchQuery.toLowerCase())) return false;
    return true;
  });

  // Get priority color
  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical': return 'bg-red-500';
      case 'high': return 'bg-orange-500';
      case 'medium': return 'bg-yellow-500';
      case 'low': return 'bg-green-500';
      default: return 'bg-gray-500';
    }
  };

  // Get status color
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'new': return 'bg-blue-500';
      case 'contacted': return 'bg-purple-500';
      case 'qualified': return 'bg-green-500';
      case 'proposal': return 'bg-orange-500';
      case 'closed': return 'bg-gray-500';
      default: return 'bg-gray-500';
    }
  };

  return (
    <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 h-screen p-6">
      {/* Filters Panel */}
      <div className="lg:col-span-1 space-y-4">
        <Card className="bg-slate-900/95 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white flex items-center">
              <Filter className="h-5 w-5 mr-2" />
              QQ Lead Filters
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* Search */}
            <div>
              <label className="text-sm text-slate-300">Search Leads</label>
              <div className="relative mt-1">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400" />
                <Input
                  placeholder="Company name..."
                  className="pl-10 bg-slate-800 border-slate-600 text-white"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
            </div>

            {/* Industry Filter */}
            <div>
              <label className="text-sm text-slate-300">Industry</label>
              <div className="grid grid-cols-1 gap-1 mt-1">
                {['Technology', 'Healthcare', 'Retail', 'Finance', 'Manufacturing'].map(industry => (
                  <label key={industry} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={filters.industry.includes(industry)}
                      onChange={(e) => {
                        const industries = e.target.checked
                          ? [...filters.industry, industry]
                          : filters.industry.filter(i => i !== industry);
                        setFilters(prev => ({ ...prev, industry: industries }));
                      }}
                    />
                    <span className="text-xs text-slate-300">{industry}</span>
                  </label>
                ))}
              </div>
            </div>

            {/* Priority Filter */}
            <div>
              <label className="text-sm text-slate-300">Priority</label>
              <div className="grid grid-cols-2 gap-1 mt-1">
                {['critical', 'high', 'medium', 'low'].map(priority => (
                  <label key={priority} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={filters.priority.includes(priority)}
                      onChange={(e) => {
                        const priorities = e.target.checked
                          ? [...filters.priority, priority]
                          : filters.priority.filter(p => p !== priority);
                        setFilters(prev => ({ ...prev, priority: priorities }));
                      }}
                    />
                    <span className="text-xs text-slate-300 capitalize">{priority}</span>
                  </label>
                ))}
              </div>
            </div>

            {/* Auto-Generated Only */}
            <div>
              <label className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  checked={filters.autoGeneratedOnly}
                  onChange={(e) => setFilters(prev => ({ ...prev, autoGeneratedOnly: e.target.checked }))}
                />
                <span className="text-sm text-slate-300">AI Generated Only</span>
              </label>
            </div>

            {/* Actions */}
            <div className="space-y-2">
              <Button
                onClick={generateLeads}
                disabled={isGenerating}
                className="w-full bg-blue-600 hover:bg-blue-700"
              >
                {isGenerating ? (
                  <>
                    <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Zap className="h-4 w-4 mr-2" />
                    Generate Leads
                  </>
                )}
              </Button>

              <Button variant="outline" className="w-full">
                <Download className="h-4 w-4 mr-2" />
                Export Leads
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Lead Statistics */}
        <Card className="bg-slate-900/95 border-slate-700">
          <CardContent className="p-4">
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-slate-300 text-sm">Total Leads</span>
                <span className="text-white font-bold">{filteredLeads.length}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-slate-300 text-sm">AI Generated</span>
                <span className="text-blue-400 font-bold">
                  {filteredLeads.filter(l => l.autoGenerated).length}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-slate-300 text-sm">Total Value</span>
                <span className="text-green-400 font-bold">
                  ${filteredLeads.reduce((sum, lead) => sum + lead.estimatedValue, 0).toLocaleString()}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-slate-300 text-sm">Avg Confidence</span>
                <span className="text-purple-400 font-bold">
                  {Math.round(filteredLeads.reduce((sum, lead) => sum + lead.confidence, 0) / filteredLeads.length || 0)}%
                </span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* QQ Lead Map */}
      <div className="lg:col-span-2">
        <Card className="bg-slate-900/95 border-slate-700 h-full">
          <CardHeader>
            <CardTitle className="text-white flex items-center justify-between">
              <div className="flex items-center">
                <Radar className="h-5 w-5 mr-2" />
                QQ Lead Intelligence Map
              </div>
              <Badge className="bg-green-500">{filteredLeads.length} Active</Badge>
            </CardTitle>
          </CardHeader>
          <CardContent className="p-0">
            <div 
              ref={mapRef}
              className="relative w-full h-[600px] bg-gradient-to-br from-slate-800 to-slate-900 overflow-hidden"
            >
              {/* Grid Background */}
              <div className="absolute inset-0 opacity-20">
                {Array.from({ length: 20 }).map((_, i) => (
                  <div key={i} className="absolute border-slate-600" style={{
                    left: `${i * 5}%`,
                    top: 0,
                    bottom: 0,
                    borderLeft: '1px solid'
                  }} />
                ))}
                {Array.from({ length: 12 }).map((_, i) => (
                  <div key={i} className="absolute border-slate-600" style={{
                    top: `${i * 8.33}%`,
                    left: 0,
                    right: 0,
                    borderTop: '1px solid'
                  }} />
                ))}
              </div>

              {/* Lead Blips */}
              {filteredLeads.map((lead) => (
                <div
                  key={lead.id}
                  className="absolute cursor-pointer transform -translate-x-1/2 -translate-y-1/2"
                  style={{
                    left: `${lead.coordinates.x}px`,
                    top: `${lead.coordinates.y}px`
                  }}
                  onClick={() => setSelectedLead(lead)}
                >
                  {/* Main Blip */}
                  <div className={`relative w-4 h-4 rounded-full ${getPriorityColor(lead.priority)} animate-pulse`}>
                    {/* Confidence Ring */}
                    <div 
                      className="absolute inset-0 rounded-full border-2 border-white opacity-60"
                      style={{
                        transform: `scale(${1 + (lead.confidence / 100) * 0.5})`
                      }}
                    />
                    
                    {/* Value Indicator */}
                    <div className="absolute -top-1 -right-1 w-2 h-2 bg-green-400 rounded-full" />
                  </div>

                  {/* Hover Label */}
                  <div className="absolute bottom-6 left-1/2 transform -translate-x-1/2 opacity-0 hover:opacity-100 transition-opacity bg-slate-800 px-2 py-1 rounded text-xs text-white whitespace-nowrap z-10">
                    {lead.businessName}
                    <br />
                    ${lead.estimatedValue.toLocaleString()} • {lead.confidence}%
                  </div>

                  {/* Radar Sweep Effect */}
                  {lead.autoGenerated && (
                    <div className="absolute inset-0 rounded-full border border-blue-400 animate-ping opacity-30" />
                  )}
                </div>
              ))}

              {/* Radar Sweep Animation */}
              <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 rounded-full border border-green-400 opacity-20 animate-ping" />
              <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-64 h-64 rounded-full border border-blue-400 opacity-30 animate-ping" style={{ animationDelay: '0.5s' }} />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Lead Details Panel */}
      <div className="lg:col-span-1">
        {selectedLead ? (
          <Card className="bg-slate-900/95 border-slate-700">
            <CardHeader>
              <CardTitle className="text-white flex items-center justify-between">
                <span className="truncate">{selectedLead.businessName}</span>
                <div className="flex space-x-1">
                  <Badge className={getPriorityColor(selectedLead.priority)}>
                    {selectedLead.priority}
                  </Badge>
                  <Badge className={getStatusColor(selectedLead.status)}>
                    {selectedLead.status}
                  </Badge>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Key Metrics */}
              <div className="grid grid-cols-2 gap-3">
                <div className="bg-slate-800/50 p-3 rounded">
                  <div className="text-xs text-slate-400">Est. Value</div>
                  <div className="text-lg font-bold text-green-400">
                    ${selectedLead.estimatedValue.toLocaleString()}
                  </div>
                </div>
                <div className="bg-slate-800/50 p-3 rounded">
                  <div className="text-xs text-slate-400">Confidence</div>
                  <div className="text-lg font-bold text-blue-400">
                    {selectedLead.confidence}%
                  </div>
                </div>
              </div>

              {/* KPIs */}
              <div className="space-y-2">
                <div className="text-sm font-medium text-white">QQ KPIs</div>
                {Object.entries(selectedLead.kpis).map(([key, value]) => (
                  <div key={key} className="flex justify-between items-center">
                    <span className="text-xs text-slate-300 capitalize">
                      {key.replace(/([A-Z])/g, ' $1').trim()}
                    </span>
                    <div className="flex items-center space-x-2">
                      <div className="w-16 bg-slate-700 rounded-full h-1">
                        <div 
                          className="bg-blue-400 h-1 rounded-full"
                          style={{ width: `${Math.min(100, (value / (key === 'dealSize' ? 500000 : 100)) * 100)}%` }}
                        />
                      </div>
                      <span className="text-xs text-white font-medium w-8">
                        {key === 'dealSize' ? `$${(value / 1000).toFixed(0)}k` : `${value}${key.includes('Rate') || key.includes('Prob') ? '%' : ''}`}
                      </span>
                    </div>
                  </div>
                ))}
              </div>

              {/* Contact Info */}
              <div className="space-y-2">
                <div className="text-sm font-medium text-white">Contact Info</div>
                {selectedLead.contactInfo.email && (
                  <div className="flex items-center space-x-2">
                    <Mail className="h-4 w-4 text-slate-400" />
                    <span className="text-xs text-slate-300">{selectedLead.contactInfo.email}</span>
                  </div>
                )}
                {selectedLead.contactInfo.phone && (
                  <div className="flex items-center space-x-2">
                    <Phone className="h-4 w-4 text-slate-400" />
                    <span className="text-xs text-slate-300">{selectedLead.contactInfo.phone}</span>
                  </div>
                )}
              </div>

              {/* AI Insights */}
              <div className="space-y-2">
                <div className="text-sm font-medium text-white">AI Insights</div>
                {selectedLead.aiInsights.map((insight, index) => (
                  <div key={index} className="flex items-start space-x-2">
                    <Target className="h-3 w-3 text-purple-400 mt-1 flex-shrink-0" />
                    <span className="text-xs text-slate-300">{insight}</span>
                  </div>
                ))}
              </div>

              {/* Actions */}
              <div className="space-y-2">
                <Button className="w-full bg-green-600 hover:bg-green-700" size="sm">
                  <Phone className="h-4 w-4 mr-2" />
                  Contact Lead
                </Button>
                <Button variant="outline" className="w-full" size="sm">
                  <Eye className="h-4 w-4 mr-2" />
                  View Full Profile
                </Button>
              </div>
            </CardContent>
          </Card>
        ) : (
          <Card className="bg-slate-900/95 border-slate-700 h-full flex items-center justify-center">
            <CardContent className="text-center">
              <Target className="h-16 w-16 text-slate-600 mx-auto mb-4" />
              <p className="text-slate-400">Select a lead from the map to view details</p>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}