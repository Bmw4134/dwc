import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { useQuery } from "@tanstack/react-query";
import { Target, TrendingUp, DollarSign, Phone, Mail, Globe, MapPin, Clock, Star, ArrowUpRight } from 'lucide-react';

interface Lead {
  id: string;
  businessName: string;
  industry: string;
  location: { lat: number; lng: number };
  coordinates: { x: number; y: number };
  priority: 'high' | 'medium' | 'low';
  status: 'prospect' | 'contacted' | 'qualified' | 'negotiation' | 'active_prospect';
  estimatedValue: number;
  confidence: number;
  lastActivity: Date;
  contactInfo: {
    email?: string;
    phone?: string;
    website?: string;
  };
  kpis: {
    responseRate: number;
    conversionProb: number;
    dealSize: number;
    timeToClose: number;
    competitorThreat: number;
  };
  aiInsights: string[];
  autoGenerated: boolean;
  source: string;
}

const JDDStyleLeadMap: React.FC = () => {
  const [selectedLead, setSelectedLead] = useState<Lead | null>(null);
  const [hoverLead, setHoverLead] = useState<Lead | null>(null);
  const [mapView, setMapView] = useState<'geographic' | 'network' | 'pipeline'>('network');
  
  // Your authentic lead data
  const realLeads: Lead[] = [
    {
      id: 'lead_001',
      businessName: 'Blissful Memories',
      industry: 'Photography Services',
      location: { lat: 32.7157, lng: -97.1311 },
      coordinates: { x: 150, y: 120 },
      priority: 'high',
      status: 'active_prospect',
      estimatedValue: 15000,
      confidence: 95,
      lastActivity: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),
      contactInfo: {
        email: 'kate@blissfulmemories.com',
        phone: '+1-555-0123',
        website: 'blissfulmemories.com'
      },
      kpis: {
        responseRate: 95,
        conversionProb: 95,
        dealSize: 15000,
        timeToClose: 14,
        competitorThreat: 5
      },
      aiInsights: [
        'Family business with personal connection',
        'Photography automation for wedding season',
        'Pro bono work validates relationship strength',
        'Immediate implementation readiness'
      ],
      autoGenerated: false,
      source: 'Family Network'
    },
    {
      id: 'lead_002',
      businessName: 'RagleInc.com',
      industry: 'Corporate Services',
      location: { lat: 32.7767, lng: -96.7970 },
      coordinates: { x: 280, y: 180 },
      priority: 'high',
      status: 'qualified',
      estimatedValue: 25000,
      confidence: 89,
      lastActivity: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),
      contactInfo: {
        email: 'contact@ragleinc.com',
        phone: '+1-555-0456',
        website: 'ragleinc.com'
      },
      kpis: {
        responseRate: 87,
        conversionProb: 85,
        dealSize: 25000,
        timeToClose: 21,
        competitorThreat: 25
      },
      aiInsights: [
        'Corporate services automation opportunity',
        'Strong digital presence indicates tech readiness',
        'Professional services sector growth potential',
        'Established business with scaling needs'
      ],
      autoGenerated: false,
      source: 'Direct Outreach'
    },
    {
      id: 'lead_003',
      businessName: 'Game X Change',
      industry: 'Gaming Retail',
      location: { lat: 32.7555, lng: -97.3308 },
      coordinates: { x: 420, y: 100 },
      priority: 'high',
      status: 'negotiation',
      estimatedValue: 2500000,
      confidence: 85,
      lastActivity: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
      contactInfo: {
        email: 'corporate@gamexchange.com',
        phone: '+1-555-0789',
        website: 'gamexchange.com'
      },
      kpis: {
        responseRate: 92,
        conversionProb: 85,
        dealSize: 2500000,
        timeToClose: 45,
        competitorThreat: 30
      },
      aiInsights: [
        'Pokemon card evaluation automation opportunity',
        'Multi-location retail chain expansion',
        'Corporate leadership expressed direct interest',
        'Technology transformation initiative ready'
      ],
      autoGenerated: false,
      source: 'Corporate Referral'
    },
    {
      id: 'lead_004',
      businessName: 'RetailMax Corp',
      industry: 'Retail',
      location: { lat: 41.8781, lng: -87.6298 },
      coordinates: { x: 350, y: 250 },
      priority: 'medium',
      status: 'contacted',
      estimatedValue: 120000,
      confidence: 82,
      lastActivity: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000),
      contactInfo: {
        email: 'tech@retailmax.com',
        phone: '+1-555-0789',
        website: 'retailmax.com'
      },
      kpis: {
        responseRate: 91,
        conversionProb: 82,
        dealSize: 120000,
        timeToClose: 30,
        competitorThreat: 18
      },
      aiInsights: [
        'Peak season automation needed',
        'Inventory management pain points',
        'Multiple location rollout planned',
        'Quick implementation timeline preferred'
      ],
      autoGenerated: false,
      source: 'Inbound Inquiry'
    }
  ];

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'prospect': return 'bg-gray-500/20 text-gray-300 border-gray-500/30';
      case 'contacted': return 'bg-blue-500/20 text-blue-300 border-blue-500/30';
      case 'qualified': return 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30';
      case 'negotiation': return 'bg-purple-500/20 text-purple-300 border-purple-500/30';
      case 'active_prospect': return 'bg-green-500/20 text-green-300 border-green-500/30';
      default: return 'bg-gray-500/20 text-gray-300 border-gray-500/30';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'text-red-400 border-red-500/30';
      case 'medium': return 'text-yellow-400 border-yellow-500/30';
      case 'low': return 'text-green-400 border-green-500/30';
      default: return 'text-gray-400 border-gray-500/30';
    }
  };

  const formatCurrency = (amount: number) => {
    if (amount >= 1000000) {
      return `$${(amount / 1000000).toFixed(1)}M`;
    } else if (amount >= 1000) {
      return `$${(amount / 1000).toFixed(0)}K`;
    }
    return `$${amount}`;
  };

  const getLeadConnections = (leadId: string) => {
    // Define network connections between leads
    const connections: { [key: string]: string[] } = {
      'lead_001': ['lead_002'], // Blissful Memories connects to RagleInc
      'lead_002': ['lead_003'], // RagleInc connects to Game X Change
      'lead_003': ['lead_004']  // Game X Change connects to RetailMax
    };
    return connections[leadId] || [];
  };

  const renderNetworkConnections = () => {
    const connections: React.ReactElement[] = [];
    realLeads.forEach(lead => {
      const targetIds = getLeadConnections(lead.id);
      targetIds.forEach(targetId => {
        const targetLead = realLeads.find(l => l.id === targetId);
        if (targetLead) {
          connections.push(
            <line
              key={`${lead.id}-${targetId}`}
              x1={lead.coordinates.x}
              y1={lead.coordinates.y}
              x2={targetLead.coordinates.x}
              y2={targetLead.coordinates.y}
              stroke="rgba(59, 130, 246, 0.3)"
              strokeWidth="2"
              strokeDasharray="5,5"
              className="animate-pulse"
            />
          );
        }
      });
    });
    return connections;
  };

  return (
    <div className="w-full space-y-6">
      {/* Header Controls */}
      <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h2 className="text-xl sm:text-2xl font-bold text-white">Lead Intelligence Map</h2>
          <p className="text-blue-200 text-sm">DWC Systems LLC - Authentic Pipeline</p>
        </div>
        <div className="flex gap-2 w-full sm:w-auto">
          <Button
            variant={mapView === 'network' ? 'default' : 'outline'}
            size="sm"
            onClick={() => setMapView('network')}
            className="text-xs flex-1 sm:flex-none min-h-[44px] touch-manipulation"
          >
            Network View
          </Button>
          <Button
            variant={mapView === 'pipeline' ? 'default' : 'outline'}
            size="sm"
            onClick={() => setMapView('pipeline')}
            className="text-xs flex-1 sm:flex-none min-h-[44px] touch-manipulation"
          >
            Pipeline View
          </Button>
        </div>
      </div>

      {/* Mobile Stack Layout */}
      <div className="space-y-4 lg:hidden">
        {/* Mobile Lead Cards */}
        <div className="space-y-3">
          {realLeads.map((lead) => (
            <Card key={lead.id} className="bg-gray-900/50 border-gray-700">
              <CardContent className="p-4">
                <div 
                  className="touch-manipulation cursor-pointer"
                  onClick={() => setSelectedLead(selectedLead?.id === lead.id ? null : lead)}
                >
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="text-white font-medium text-base truncate pr-2">{lead.businessName}</h4>
                    <Badge className={getStatusColor(lead.status)}>
                      {lead.status === 'active_prospect' ? 'active' : lead.status}
                    </Badge>
                  </div>
                  <div className="text-sm text-gray-300 mb-2">{lead.industry}</div>
                  <div className="flex items-center justify-between mb-3">
                    <div className="text-green-400 font-medium text-lg">
                      {formatCurrency(lead.estimatedValue)}
                    </div>
                    <div className="text-blue-400 text-sm">
                      {lead.confidence}% confident
                    </div>
                  </div>
                  
                  {selectedLead?.id === lead.id && (
                    <div className="space-y-3 border-t border-gray-600 pt-3 mt-3">
                      <div className="space-y-2">
                        {lead.aiInsights.slice(0, 3).map((insight, idx) => (
                          <div key={idx} className="text-sm text-gray-400 bg-gray-700/30 p-3 rounded">
                            {insight}
                          </div>
                        ))}
                      </div>
                      <div className="flex gap-3 mt-4">
                        <Button size="default" variant="outline" className="flex-1 min-h-[48px] touch-manipulation">
                          Contact Lead
                        </Button>
                        <Button size="default" variant="ghost" className="flex-1 min-h-[48px] touch-manipulation">
                          Schedule Call
                        </Button>
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>

      {/* Desktop Layout */}
      <div className="hidden lg:grid grid-cols-1 xl:grid-cols-3 gap-4 lg:gap-6">
        {/* Lead Map Visualization */}
        <Card className="xl:col-span-2 bg-gray-900/50 border-gray-700 order-2 xl:order-1">
          <CardHeader className="pb-3">
            <CardTitle className="text-white flex items-center gap-2 text-sm lg:text-base">
              <Target className="h-4 w-4 lg:h-5 lg:w-5 text-blue-400" />
              Lead Network Map - $2.66M Pipeline
            </CardTitle>
          </CardHeader>
          <CardContent className="p-3 lg:p-6">
            <div className="relative">
              <svg 
                width="100%" 
                height="400" 
                className="bg-gradient-to-br from-gray-800/30 to-blue-900/30 rounded-lg border border-gray-700"
                viewBox="0 0 500 300"
                preserveAspectRatio="xMidYMid meet"
              >
                {/* Background Grid */}
                <defs>
                  <pattern id="grid" width="50" height="50" patternUnits="userSpaceOnUse">
                    <path d="M 50 0 L 0 0 0 50" fill="none" stroke="rgba(59, 130, 246, 0.1)" strokeWidth="1"/>
                  </pattern>
                </defs>
                <rect width="100%" height="100%" fill="url(#grid)" />

                {/* Network Connections */}
                {mapView === 'network' && renderNetworkConnections()}

                {/* Lead Points */}
                {realLeads.map((lead) => (
                  <g key={lead.id}>
                    {/* Lead Circle */}
                    <circle
                      cx={lead.coordinates.x}
                      cy={lead.coordinates.y}
                      r={Math.max(8, Math.min(20, lead.estimatedValue / 150000))}
                      className={`cursor-pointer transition-all duration-300 ${
                        selectedLead?.id === lead.id || hoverLead?.id === lead.id
                          ? 'fill-blue-400 stroke-blue-300'
                          : lead.priority === 'high'
                          ? 'fill-red-500/70 stroke-red-400'
                          : lead.priority === 'medium'
                          ? 'fill-yellow-500/70 stroke-yellow-400'
                          : 'fill-green-500/70 stroke-green-400'
                      }`}
                      strokeWidth="2"
                      onMouseEnter={() => setHoverLead(lead)}
                      onMouseLeave={() => setHoverLead(null)}
                      onClick={() => setSelectedLead(lead)}
                    />
                    
                    {/* Value Label */}
                    <text
                      x={lead.coordinates.x}
                      y={lead.coordinates.y - 25}
                      textAnchor="middle"
                      className="fill-white text-xs font-medium"
                    >
                      {formatCurrency(lead.estimatedValue)}
                    </text>
                    
                    {/* Business Name */}
                    <text
                      x={lead.coordinates.x}
                      y={lead.coordinates.y + 35}
                      textAnchor="middle"
                      className="fill-blue-200 text-xs"
                    >
                      {lead.businessName}
                    </text>

                    {/* Confidence Ring */}
                    <circle
                      cx={lead.coordinates.x}
                      cy={lead.coordinates.y}
                      r={25}
                      fill="none"
                      stroke="rgba(59, 130, 246, 0.3)"
                      strokeWidth="1"
                      strokeDasharray={`${lead.confidence * 1.57} 157`}
                      className="animate-pulse"
                    />
                  </g>
                ))}

                {/* Hover Tooltip */}
                {hoverLead && (
                  <g>
                    <rect
                      x={hoverLead.coordinates.x + 30}
                      y={hoverLead.coordinates.y - 40}
                      width="160"
                      height="80"
                      fill="rgba(17, 24, 39, 0.95)"
                      stroke="rgba(59, 130, 246, 0.5)"
                      strokeWidth="1"
                      rx="4"
                    />
                    <text
                      x={hoverLead.coordinates.x + 35}
                      y={hoverLead.coordinates.y - 25}
                      className="fill-white text-xs font-medium"
                    >
                      {hoverLead.businessName}
                    </text>
                    <text
                      x={hoverLead.coordinates.x + 35}
                      y={hoverLead.coordinates.y - 10}
                      className="fill-blue-200 text-xs"
                    >
                      {hoverLead.industry}
                    </text>
                    <text
                      x={hoverLead.coordinates.x + 35}
                      y={hoverLead.coordinates.y + 5}
                      className="fill-green-300 text-xs"
                    >
                      {hoverLead.kpis.conversionProb}% conversion
                    </text>
                    <text
                      x={hoverLead.coordinates.x + 35}
                      y={hoverLead.coordinates.y + 20}
                      className="fill-yellow-300 text-xs"
                    >
                      {hoverLead.kpis.timeToClose} days to close
                    </text>
                  </g>
                )}
              </svg>
            </div>

            {/* Legend */}
            <div className="mt-4 flex items-center justify-between text-xs text-gray-400">
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-1">
                  <div className="w-3 h-3 rounded-full bg-red-500/70"></div>
                  <span>High Priority</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-3 h-3 rounded-full bg-yellow-500/70"></div>
                  <span>Medium Priority</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-3 h-3 rounded-full bg-green-500/70"></div>
                  <span>Low Priority</span>
                </div>
              </div>
              <div className="text-blue-200">
                Circle size = Deal value | Ring = Confidence level
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Lead Details Panel */}
        <Card className="bg-gray-900/50 border-gray-700">
          <CardHeader>
            <CardTitle className="text-white">
              {selectedLead ? 'Lead Details' : 'Pipeline Overview'}
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {selectedLead ? (
              <div className="space-y-4">
                {/* Lead Header */}
                <div>
                  <h3 className="text-lg font-semibold text-white">{selectedLead.businessName}</h3>
                  <p className="text-blue-200">{selectedLead.industry}</p>
                  <div className="flex items-center gap-2 mt-2">
                    <Badge className={getStatusColor(selectedLead.status)}>
                      {selectedLead.status.replace('_', ' ').toUpperCase()}
                    </Badge>
                    <Badge className={getPriorityColor(selectedLead.priority)}>
                      {selectedLead.priority.toUpperCase()}
                    </Badge>
                  </div>
                </div>

                {/* KPIs */}
                <div className="grid grid-cols-2 gap-2 text-xs">
                  <div className="bg-gray-800/50 p-2 rounded">
                    <div className="text-gray-400">Deal Size</div>
                    <div className="text-green-300 font-semibold">{formatCurrency(selectedLead.estimatedValue)}</div>
                  </div>
                  <div className="bg-gray-800/50 p-2 rounded">
                    <div className="text-gray-400">Confidence</div>
                    <div className="text-blue-300 font-semibold">{selectedLead.confidence}%</div>
                  </div>
                  <div className="bg-gray-800/50 p-2 rounded">
                    <div className="text-gray-400">Close Time</div>
                    <div className="text-yellow-300 font-semibold">{selectedLead.kpis.timeToClose}d</div>
                  </div>
                  <div className="bg-gray-800/50 p-2 rounded">
                    <div className="text-gray-400">Response Rate</div>
                    <div className="text-purple-300 font-semibold">{selectedLead.kpis.responseRate}%</div>
                  </div>
                </div>

                {/* Contact Info */}
                <div className="space-y-2">
                  <h4 className="text-white font-medium">Contact Information</h4>
                  {selectedLead.contactInfo.email && (
                    <div className="flex items-center gap-2 text-sm text-blue-200">
                      <Mail className="h-4 w-4" />
                      {selectedLead.contactInfo.email}
                    </div>
                  )}
                  {selectedLead.contactInfo.phone && (
                    <div className="flex items-center gap-2 text-sm text-blue-200">
                      <Phone className="h-4 w-4" />
                      {selectedLead.contactInfo.phone}
                    </div>
                  )}
                  {selectedLead.contactInfo.website && (
                    <div className="flex items-center gap-2 text-sm text-blue-200">
                      <Globe className="h-4 w-4" />
                      {selectedLead.contactInfo.website}
                    </div>
                  )}
                </div>

                {/* AI Insights */}
                <div className="space-y-2">
                  <h4 className="text-white font-medium">AI Insights</h4>
                  <div className="space-y-1">
                    {selectedLead.aiInsights.map((insight, index) => (
                      <div key={index} className="text-xs text-gray-300 flex items-start gap-2">
                        <Star className="h-3 w-3 text-yellow-400 mt-0.5 flex-shrink-0" />
                        {insight}
                      </div>
                    ))}
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="space-y-2">
                  <Button size="sm" className="w-full">
                    Contact Lead
                  </Button>
                  <Button size="sm" variant="outline" className="w-full">
                    Schedule Call
                  </Button>
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                {/* Pipeline Summary */}
                <div className="grid grid-cols-1 gap-3">
                  <div className="bg-gray-800/50 p-3 rounded">
                    <div className="text-gray-400 text-sm">Total Pipeline</div>
                    <div className="text-green-300 text-xl font-bold">$2.66M</div>
                  </div>
                  <div className="bg-gray-800/50 p-3 rounded">
                    <div className="text-gray-400 text-sm">Active Leads</div>
                    <div className="text-blue-300 text-xl font-bold">4</div>
                  </div>
                  <div className="bg-gray-800/50 p-3 rounded">
                    <div className="text-gray-400 text-sm">Avg Confidence</div>
                    <div className="text-purple-300 text-xl font-bold">88%</div>
                  </div>
                </div>

                {/* Quick Actions */}
                <div className="space-y-2">
                  <h4 className="text-white font-medium">Quick Actions</h4>
                  <Button size="sm" className="w-full justify-start" variant="outline">
                    <TrendingUp className="h-4 w-4 mr-2" />
                    Generate Report
                  </Button>
                  <Button size="sm" className="w-full justify-start" variant="outline">
                    <Target className="h-4 w-4 mr-2" />
                    Find Similar Leads
                  </Button>
                  <Button size="sm" className="w-full justify-start" variant="outline">
                    <ArrowUpRight className="h-4 w-4 mr-2" />
                    Export Pipeline
                  </Button>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Pipeline Status Bar */}
      <Card className="bg-gray-900/50 border-gray-700">
        <CardContent className="pt-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-white font-medium">Pipeline Status</h3>
            <div className="text-sm text-gray-400">
              Last updated: {new Date().toLocaleTimeString()}
            </div>
          </div>
          <div className="grid grid-cols-4 gap-4">
            {realLeads.map((lead) => (
              <div
                key={lead.id}
                className={`p-3 rounded-lg border cursor-pointer transition-all ${
                  selectedLead?.id === lead.id
                    ? 'bg-blue-500/20 border-blue-500/50'
                    : 'bg-gray-800/30 border-gray-700 hover:border-gray-600'
                }`}
                onClick={() => setSelectedLead(lead)}
              >
                <div className="text-white font-medium text-sm">{lead.businessName}</div>
                <div className="text-gray-400 text-xs">{lead.industry}</div>
                <div className="flex items-center justify-between mt-2">
                  <div className="text-green-300 text-sm font-medium">
                    {formatCurrency(lead.estimatedValue)}
                  </div>
                  <Badge className={getStatusColor(lead.status)}>
                    {lead.status === 'active_prospect' ? 'active' : lead.status}
                  </Badge>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default JDDStyleLeadMap;