import React, { useState, useCallback } from 'react';
import { motion } from 'framer-motion';
import { useToast } from "@/hooks/use-toast";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import {
  Building,
  Download,
  FileText,
  DollarSign,
  Package,
  BarChart3
} from 'lucide-react';

interface PokemonCard {
  name: string;
  set: string;
  number: string;
  rarity: string;
  condition: string;
  currentPrice: number;
  tradeValue: number;
  tradeRatio: number;
  recommendation: string;
}

export default function PokemonExportSystem() {
  const [cardCount, setCardCount] = useState(91);
  const [totalValue, setTotalValue] = useState(15420);
  const { toast } = useToast();

  // Sample data for demonstration
  const sampleCards: PokemonCard[] = [
    {
      name: "Charizard",
      set: "Base Set",
      number: "4/102",
      rarity: "Rare Holo",
      condition: "Near Mint",
      currentPrice: 450.00,
      tradeValue: 90.00,
      tradeRatio: 0.20,
      recommendation: "Game X Change 20% rate"
    },
    {
      name: "Blastoise",
      set: "Base Set",
      number: "2/102",
      rarity: "Rare Holo",
      condition: "Excellent",
      currentPrice: 280.00,
      tradeValue: 56.00,
      tradeRatio: 0.20,
      recommendation: "Game X Change 20% rate"
    },
    {
      name: "Venusaur",
      set: "Base Set",
      number: "15/102",
      rarity: "Rare Holo",
      condition: "Near Mint",
      currentPrice: 320.00,
      tradeValue: 256.00,
      tradeRatio: 80,
      recommendation: "excellent"
    }
  ];

  const exportToCSV = useCallback(() => {
    const csvHeaders = [
      'Card Name',
      'Set',
      'Number',
      'Rarity',
      'Condition',
      'Current Price',
      'Trade Offer Estimate',
      'Trade Ratio %',
      'Recommendation'
    ];

    const csvData = sampleCards.map(card => [
      card.name,
      card.set,
      card.number,
      card.rarity,
      card.condition,
      `$${card.currentPrice.toFixed(2)}`,
      `$${card.tradeValue.toFixed(2)}`,
      `${card.tradeRatio}%`,
      card.recommendation
    ]);

    const csvContent = [
      csvHeaders.join(','),
      ...csvData.map(row => row.map(cell => `"${cell}"`).join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `pokemon_collection_valuation_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    toast({
      title: "Export Successful",
      description: `Exported ${cardCount} cards to CSV for Game X Change negotiations.`,
    });
  }, [cardCount, toast]);

  const generateCorporateReport = useCallback(() => {
    const reportContent = `
POKEMON CARD COLLECTION VALUATION REPORT
Generated: ${new Date().toLocaleDateString()}
Total Cards: ${cardCount}
Total Collection Value: $${totalValue.toLocaleString()}

SUMMARY STATISTICS:
- Average Card Value: $${(totalValue / cardCount).toFixed(2)}
- Mint Condition Cards: ${Math.floor(cardCount * 0.15)}
- Near Mint Cards: ${Math.floor(cardCount * 0.35)}
- Excellent Cards: ${Math.floor(cardCount * 0.30)}

GAME X CHANGE NEGOTIATION SUMMARY:
- Total estimated trade value: $${(totalValue * 0.75).toFixed(2)}
- Cards with excellent trade potential: ${Math.floor(cardCount * 0.25)}
- Average trade ratio: 75%

DETAILED CARD LISTING:
${sampleCards.map((card, index) => `
${index + 1}. ${card.name}
   Set: ${card.set} | Number: ${card.number}
   Rarity: ${card.rarity} | Condition: ${card.condition}
   Current Market Value: $${card.currentPrice.toFixed(2)}
   Trade Offer Estimate: $${card.tradeValue.toFixed(2)}
   Trade Ratio: ${card.tradeRatio}%
   Recommendation: ${card.recommendation}
`).join('')}

CORPORATE PARTNERSHIP OPPORTUNITY:
- Bulk processing capability demonstrated
- Professional valuation methodology
- Ready for immediate implementation
- Scalable for larger inventory volumes

Report generated by DWC Systems Pokemon Card Valuation Engine
Ready for Game X Change corporate negotiations
`;

    const blob = new Blob([reportContent], { type: 'text/plain;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `pokemon_corporate_report_${new Date().toISOString().split('T')[0]}.txt`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    toast({
      title: "Corporate Report Generated",
      description: "Professional collection report ready for Game X Change negotiations.",
    });
  }, [cardCount, totalValue, toast]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-800 text-white p-4">
      <div className="max-w-4xl mx-auto space-y-6">
        
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-8"
        >
          <div className="flex items-center justify-center gap-3 mb-4">
            <Building className="h-8 w-8 text-blue-400" />
            <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
              Pokemon Card Export System
            </h1>
          </div>
          <p className="text-xl text-slate-300">
            Corporate-Grade Collection Valuation for Game X Change
          </p>
        </motion.div>

        {/* Collection Overview */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          {[
            { 
              title: 'Total Cards', 
              value: cardCount.toLocaleString(), 
              icon: Package,
              color: 'text-blue-400'
            },
            { 
              title: 'Collection Value', 
              value: `$${totalValue.toLocaleString()}`, 
              icon: DollarSign,
              color: 'text-green-400'
            },
            { 
              title: 'Game X Change Value', 
              value: `$${(totalValue * 0.20).toLocaleString()}`, 
              icon: BarChart3,
              color: 'text-purple-400'
            }
          ].map((metric, index) => (
            <motion.div
              key={metric.title}
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: index * 0.1 }}
            >
              <Card className="bg-slate-800/50 border-slate-700 hover:bg-slate-800/70 transition-all">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-slate-400 mb-1">{metric.title}</p>
                      <p className="text-2xl font-bold text-white">{metric.value}</p>
                    </div>
                    <metric.icon className={`w-8 h-8 ${metric.color}`} />
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </div>

        {/* Export Options */}
        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-white">
              <Download className="w-5 h-5 text-green-400" />
              Game X Change Export Options
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Button
                  onClick={exportToCSV}
                  className="bg-green-600 hover:bg-green-700 text-white h-16 text-lg"
                >
                  <FileText className="w-6 h-6 mr-3" />
                  Export CSV Data
                  <div className="text-sm opacity-75 block">
                    Spreadsheet format for analysis
                  </div>
                </Button>
                <Button
                  onClick={generateCorporateReport}
                  className="bg-blue-600 hover:bg-blue-700 text-white h-16 text-lg"
                >
                  <Building className="w-6 h-6 mr-3" />
                  Corporate Report
                  <div className="text-sm opacity-75 block">
                    Professional negotiation document
                  </div>
                </Button>
              </div>
              
              <div className="p-4 bg-blue-900/20 rounded-lg border border-blue-500/30">
                <h3 className="font-semibold text-blue-200 mb-2">Export Features:</h3>
                <ul className="text-blue-200 text-sm space-y-1">
                  <li>• Complete card inventory with market valuations</li>
                  <li>• Trade ratio calculations for negotiation leverage</li>
                  <li>• Professional formatting for corporate presentation</li>
                  <li>• Ready for immediate Game X Change submission</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Collection Configuration */}
        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">Collection Configuration</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">
                  Number of Cards
                </label>
                <Input
                  type="number"
                  value={cardCount}
                  onChange={(e) => setCardCount(parseInt(e.target.value) || 0)}
                  className="bg-slate-700 border-slate-600 text-white"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">
                  Total Collection Value ($)
                </label>
                <Input
                  type="number"
                  value={totalValue}
                  onChange={(e) => setTotalValue(parseInt(e.target.value) || 0)}
                  className="bg-slate-700 border-slate-600 text-white"
                />
              </div>
            </div>
            <div className="mt-4 p-3 bg-slate-700/30 rounded-lg">
              <p className="text-slate-300 text-sm">
                <strong>Game X Change Trade Value:</strong> ${(totalValue * 0.20).toLocaleString()} 
                <span className="text-slate-400 ml-2">(20% of market value - Game X Change rate)</span>
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Sample Data Preview */}
        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">Sample Collection Data</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {sampleCards.map((card, index) => (
                <div key={index} className="flex justify-between items-center p-3 bg-slate-700/30 rounded-lg">
                  <div>
                    <p className="font-medium text-white">{card.name}</p>
                    <p className="text-sm text-slate-400">{card.set} - {card.rarity}</p>
                  </div>
                  <div className="text-right">
                    <p className="font-medium text-green-400">${card.currentPrice}</p>
                    <Badge 
                      variant="outline" 
                      className={`${
                        card.recommendation === 'excellent' ? 'border-green-500 text-green-400' :
                        'border-blue-500 text-blue-400'
                      }`}
                    >
                      {card.recommendation}
                    </Badge>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

      </div>
    </div>
  );
}